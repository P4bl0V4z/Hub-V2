generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                Int              @id @default(autoincrement())
  email             String           @unique
  password          String?
  nombre            String
  creadoEn          DateTime         @default(now()) @map("creado_en")
  actualizadoEn     DateTime         @updatedAt @map("actualizado_en")
  tokenVerificacion String?          @map("token_verificacion")
  activo            Boolean          @default(false)
  verificadoEn      DateTime?        @map("verificado_en")
  tipoUsuario       String?          @map("tipo_usuario")
  googleId          String?          @unique @map("google_id")
  msId              String?          @unique @map("ms_id")
  avatarUrl         String?          @map("avatar_url")
  lastLoginAt       DateTime?        @map("last_login_at")
  empresas          UsuarioEmpresa[]
  testAttempts TestAttempt[]
}

model Empresa {
  id               Int              @id @default(autoincrement())
  nombre           String
  creadoEn         DateTime         @default(now()) @map("creado_en")
  esEmpresaMaestra Boolean          @default(false)
  usuarios         UsuarioEmpresa[]
}

model Rol {
  id                 Int          @id @default(autoincrement())
  nombre             String       @unique
  descripcion        String?
  soloEmpresaMaestra Boolean      @default(false)
  usuarios           UsuarioRol[]
}

model UsuarioEmpresa {
  id        Int          @id @default(autoincrement())
  usuarioId Int          @map("usuario_id")
  empresaId Int          @map("empresa_id")
  empresa   Empresa      @relation(fields: [empresaId], references: [id])
  usuario   Usuario      @relation(fields: [usuarioId], references: [id])
  roles     UsuarioRol[]

  @@unique([usuarioId, empresaId])
}

model UsuarioRol {
  id               Int            @id @default(autoincrement())
  usuarioEmpresaId Int            @map("usuario_empresa_id")
  rolId            Int            @map("rol_id")
  rol              Rol            @relation(fields: [rolId], references: [id])
  usuarioEmpresa   UsuarioEmpresa @relation(fields: [usuarioEmpresaId], references: [id])

  @@unique([usuarioEmpresaId, rolId])
}
model TestAttempt {
  id          Int       @id @default(autoincrement())
  userId      Int
  testId      Int     
  label       String?
  startedAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completed   Boolean   @default(false)
  completedAt DateTime?
  progress    Json      @db.JsonB
  user        Usuario   @relation(fields: [userId], references: [id])
  @@index([userId, testId, completed])
  @@index([testId, completedAt])
}
